"""
SQLAlchemy repository implementation for {{ entity.name }} entities.

This module provides the SQLAlchemy-based implementation of the {{ entity.name }} repository.
"""

from typing import List, Optional
from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession

from ...domain.{{ context.name|lower }}.entities.{{ entity.name|lower }} import {{ entity.name }}
from ...domain.{{ context.name|lower }}.repositories.{{ entity.name|lower }}_repository import {{ entity.name }}Repository
from .models import {{ entity.name }}Model


class SqlAlchemy{{ entity.name }}Repository({{ entity.name }}Repository):
    """SQLAlchemy implementation of {{ entity.name }}Repository."""

    def __init__(self, session: AsyncSession):
        """
        Initialize the repository.

        Args:
            session: SQLAlchemy async session
        """
        self._session = session

    async def get_all(self) -> List[{{ entity.name }}]:
        """
        Get all {{ entity.name }} entities.

        Returns:
            List of {{ entity.name }} entities
        """
        result = await self._session.execute(select({{ entity.name }}Model))
        models = result.scalars().all()
        return [self._to_entity(model) for model in models]

    async def get_by_id(self, id: str) -> Optional[{{ entity.name }}]:
        """
        Get a {{ entity.name }} by ID.

        Args:
            id: Entity ID

        Returns:
            {{ entity.name }} entity if found, None otherwise
        """
        result = await self._session.execute(
            select({{ entity.name }}Model).filter({{ entity.name }}Model.id == id)
        )
        model = result.scalar_one_or_none()
        return self._to_entity(model) if model else None

    async def create(self, entity: {{ entity.name }}) -> {{ entity.name }}:
        """
        Create a new {{ entity.name }}.

        Args:
            entity: {{ entity.name }} entity to create

        Returns:
            Created {{ entity.name }} entity
        """
        model = self._to_model(entity)
        self._session.add(model)
        await self._session.commit()
        await self._session.refresh(model)
        return self._to_entity(model)

    async def update(self, id: str, entity: {{ entity.name }}) -> Optional[{{ entity.name }}]:
        """
        Update an existing {{ entity.name }}.

        Args:
            id: Entity ID
            entity: Updated {{ entity.name }} entity

        Returns:
            Updated {{ entity.name }} entity if found, None otherwise
        """
        result = await self._session.execute(
            select({{ entity.name }}Model).filter({{ entity.name }}Model.id == id)
        )
        model = result.scalar_one_or_none()

        if not model:
            return None

        # Update model fields
        {% for property in entity.properties %}
        {% if property.name != 'id' %}
        model.{{ property.name }} = entity.{{ property.name }}
        {% endif %}
        {% endfor %}

        await self._session.commit()
        await self._session.refresh(model)
        return self._to_entity(model)

    async def delete(self, id: str) -> bool:
        """
        Delete a {{ entity.name }}.

        Args:
            id: Entity ID

        Returns:
            True if entity was deleted, False if not found
        """
        result = await self._session.execute(
            delete({{ entity.name }}Model).filter({{ entity.name }}Model.id == id)
        )
        await self._session.commit()
        return result.rowcount > 0

    def _to_entity(self, model: {{ entity.name }}Model) -> {{ entity.name }}:
        """
        Convert a database model to a domain entity.

        Args:
            model: Database model to convert

        Returns:
            Domain entity
        """
        if not model:
            return None

        return {{ entity.name }}(
            {% for property in entity.properties %}
            {{ property.name }}=model.{{ property.name }},
            {% endfor %}
        )

    def _to_model(self, entity: {{ entity.name }}) -> {{ entity.name }}Model:
        """
        Convert a domain entity to a database model.

        Args:
            entity: Domain entity to convert

        Returns:
            Database model
        """
        return {{ entity.name }}Model(
            {% for property in entity.properties %}
            {{ property.name }}=entity.{{ property.name }},
            {% endfor %}
        )

    {% for method in entity.methods %}
    {% if method.is_query %}
    async def {{ method.name }}(self{% for param in method.parameters %}, {{ param.name }}: {{ param.type }}{% if param.default_value %} = {{ param.default_value }}{% endif %}{% endfor %}){% if method.return_type %} -> {{ method.return_type }}{% endif %}:
        """
        {{ method.description or "Custom query method " + method.name }}.

        {% for param in method.parameters %}
        Args:
            {{ param.name }}: {{ param.description or param.name }}
        {% endfor %}
        {% if method.return_type %}
        Returns:
            {{ method.return_description or "The query result" }}
        {% endif %}
        """
        # TODO: Implement custom query
        raise NotImplementedError("Method not implemented")
    {% endif %}
    {% endfor %}
