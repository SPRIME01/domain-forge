%import common.WS
%import common.INT
%import common.FLOAT
%import common.WORD
%import common.ESCAPED_STRING
%ignore WS

// --------------------- Terminals ---------------------

// MODIFIERS: Modify relationships to indicate obligations or permissions.
MODIFIER: "!"    // Must (Obligation)
        | "~"   // Should (Recommendation)
        | "?"   // May (Permission)

// ENTITY SYMBOLS: Indicate the type of an entity.
ENTITY_SYMBOL: "#"    // Entity (aggregate root)
             | "%"    // Value object
             | "^"    // Event
             | ">>"   // Service/Process
             | "&"    // Role/Actor
             | "@"    // Context/Bounded Context
             | "$"    // Repository
             | "*"    // Module/Package

// RELATIONSHIP SYMBOLS: Represent various relationship types.
RELATIONSHIP_SYMBOL: "=>"      // Dependency / Uses
                   | "<->"      // Bidirectional Association
                   | "--"       // Association
                   | "->"       // One-way Association
                   | "."        // Composition
                   | "::"       // Inheritance
                   | "/"        // Implementation
                   | "="        // Equivalence

// API and UI annotations
HTTP_METHOD: "GET" | "POST" | "PUT" | "DELETE" | "PATCH"
UI_COMPONENT: "Form" | "Table" | "Card" | "Detail" | "List"
VISIBILITY: "public" | "private" | "protected"

// Symbols used for grouping expressions
LPAREN: "("
RPAREN: ")"
LSQBRACKET: "["
RSQBRACKET: "]"
LCURLYBRACE: "{"
RCURLYBRACE: "}"
LANGLED: "<"
RANGLED: ">"

// Other separators
ITEM_SEPARATOR: ","           // Separator in groups and collections
COLON: ":"
EQUALS: "="

// Comments
COMMENT: /\/\/[^\n]*/         // Single-line comments
       | /\/\*[\s\S]*?\*\//    // Multi-line comments
%ignore COMMENT

// IDENTIFIERS: Names for entities.
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/

// String literals
STRING: ESCAPED_STRING

// --------------------- Grammar Rules ---------------------

// A complete domain model consists of one or more bounded contexts
start: context_definition+

// A bounded context defines a subsystem boundary
context_definition: "@" IDENTIFIER LCURLYBRACE
                     (entity_definition
                     | value_object_definition
                     | event_definition
                     | service_definition
                     | repository_definition
                     | module_definition
                     | role_definition)*
                   RCURLYBRACE

// Entity - aggregate root
entity_definition: "#" IDENTIFIER (COLON IDENTIFIER)? LCURLYBRACE
                    (property_definition
                    | method_definition
                    | api_definition
                    | ui_definition)*
                  RCURLYBRACE

// Value Object - immutable with no identity
value_object_definition: "%" IDENTIFIER LCURLYBRACE
                          property_definition*
                        RCURLYBRACE

// Event definition
event_definition: "^" IDENTIFIER LCURLYBRACE
                   property_definition*
                 RCURLYBRACE

// Service definition
service_definition: ">>" IDENTIFIER LCURLYBRACE
                     (method_definition | api_definition)*
                   RCURLYBRACE

// Repository definition
repository_definition: "$" IDENTIFIER LCURLYBRACE
                        method_definition*
                      RCURLYBRACE

// Module definition
module_definition: "*" IDENTIFIER LCURLYBRACE
                    (entity_definition
                    | value_object_definition
                    | event_definition
                    | service_definition
                    | repository_definition)*
                  RCURLYBRACE

// Role definition
role_definition: "&" IDENTIFIER LCURLYBRACE
                  property_definition*
                RCURLYBRACE

// Property definition
property_definition: IDENTIFIER COLON type_definition (EQUALS default_value)?
                    (LSQBRACKET constraint+ RSQBRACKET)?

// Type definition including collections
type_definition: IDENTIFIER              -> simple_type
               | IDENTIFIER LANGLED IDENTIFIER RANGLED  -> generic_type
               | "List" LANGLED type_definition RANGLED -> list_type
               | "Dict" LANGLED type_definition COLON type_definition RANGLED -> dict_type

// Method definition
method_definition: (VISIBILITY)? IDENTIFIER LPAREN parameter_list? RPAREN (COLON type_definition)?
                    (LCURLYBRACE description? RCURLYBRACE)?

// Parameter list
parameter_list: parameter (ITEM_SEPARATOR parameter)*

// Parameter
parameter: IDENTIFIER COLON type_definition (EQUALS default_value)?

// Default value
default_value: INT
             | FLOAT
             | STRING
             | IDENTIFIER
             | LSQBRACKET value_list? RSQBRACKET

// Value list
value_list: value (ITEM_SEPARATOR value)*

// Value
value: INT
     | FLOAT
     | STRING
     | IDENTIFIER
     | LSQBRACKET value_list? RSQBRACKET

// Constraint
constraint: "required"
          | "unique"
          | "min" COLON INT
          | "max" COLON INT
          | "pattern" COLON STRING
          | "foreign_key" COLON IDENTIFIER

// Relationship definition
relationship_definition: source_entity RELATIONSHIP_SYMBOL target_entity (LCURLYBRACE description RCURLYBRACE)?

// Source and target entities
source_entity: IDENTIFIER
target_entity: IDENTIFIER

// Description
description: STRING

// API definition
api_definition: "api" COLON HTTP_METHOD STRING (LPAREN parameter_list? RPAREN)?
                (COLON type_definition)? (LCURLYBRACE description? RCURLYBRACE)?

// UI definition
ui_definition: "ui" COLON UI_COMPONENT (LPAREN parameter_list? RPAREN)?
               (LCURLYBRACE description? RCURLYBRACE)?
